{"version":3,"sources":["tentacle-image/tentacle-image.ts"],"names":["TentacleImage","HTMLElement","[object Object]","super","this","picture","_src","document","createElement","appendChild","img","Image","src","getAttribute","val","setAttribute","observedAttributes","name","old_val","new_val","console","warn","window","customElements","define","e"],"mappings":"AAcA,MAAMA,UAAsBC,YAUxBC,cACIC,QATIC,KAAAC,QAA8B,KAG9BD,KAAAE,KAAe,KASnBF,KAAKC,QAAUE,SAASC,cAAc,WACtCJ,KAAKK,YAAYL,KAAKC,SAGtB,MAAMK,EAAM,IAAIC,MAChBD,EAAIE,IAAMR,KAAKS,aAAa,OAC5BT,KAAKC,QAAQI,YAAYC,GAG7BR,qBAKAA,kBAKAA,kBAMAU,UACI,OAAOR,KAAKE,KAGhBM,QAAQE,GACJV,KAAKW,aAAa,MAAOD,GAI7BE,gCACI,MAAO,CAAC,OAGZd,yBAAyBe,EAAcC,EAAiBC,GACpD,OAAQF,GACJ,IAAK,MACDb,KAAKE,KAAOa,EACZ,MACJ,QACIC,QAAQC,mCAAmCJ,mDAM3D,IACIK,OAAOC,eAAeC,OAAO,iBAAkBxB,GACjD,MAAMyB,GACJL,QAAQC,KAAK","file":"../../tentacle-image/tentacle-image.js","sourcesContent":["/* TentacleImage\n * Usage: <tentacle-image src=\"<src>\" | formats=\"[png|webp|jpg|jpeg|gif]\" sizes=\"[1,2,3]\" default=\"<src>\" loading open></>\n *\n * TentacleImage is a <picture> tag replacement that allows for neater HTML by\n * allowing you to specify the formats and sizes you support without having to \n * enumerate all the sources.\n * \n * TentacleImage also provides an optional default image incase the specified\n * image fails to load, and an optional loading screen while the image loads.\n*/\n\n/* Used to keep track of where a bubble is located on the canvas */\n\n/* The eponymous web component */\nclass TentacleImage extends HTMLElement {\n    /* Elements */\n    private picture: HTMLPictureElement = null;\n\n    /* State */\n    private _src: string = null;\n\n    /* Minified styles injected here */\n    // private static styles = `[ inject-inline tentacle-image.css ]`;\n\n    constructor() {\n        super();\n\n        /* Add Picture Element */\n        this.picture = document.createElement('picture');\n        this.appendChild(this.picture);\n\n        /* Add image element */\n        const img = new Image();\n        img.src = this.getAttribute('src');\n        this.picture.appendChild(img);\n    }\n\n    connectedCallback() {\n       \n    }\n\n    /* Displays a loading screen when called */\n    displayLoading(): void {\n\n    }\n\n    /* Displays the default image */\n    displayDefault(): void {\n\n    }\n\n\n    /* SETTERS & GETTERS */\n    get src(): string {\n        return this._src;\n    }\n\n    set src(val: string) {\n        this.setAttribute('src', val);\n    }\n\n    /* Reflexive Attributes */\n    static get observedAttributes() {\n        return ['src'];\n    }\n\n    attributeChangedCallback(name: string, old_val: string, new_val: string): void {\n        switch (name) {\n            case 'src':\n                this._src = new_val;\n                break;\n            default:\n                console.warn(`[TentacleImage] Attribute '${name}' set but does not exist on BubbleBackground`);\n        }\n    }\n}\n\n/* Self register the element */\ntry {\n    window.customElements.define(\"tentacle-image\", TentacleImage);\n} catch(e) {\n    console.warn(`TentacleImage Custom Element already exists`);\n}\n"]}